/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.7.0 (NJsonSchema v10.3.9.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export interface IClient {
    /**
     * @param username (optional) 
     * @param password (optional) 
     * @return Success
     */
    registerAccount(username: string | undefined, password: string | undefined): Promise<void>;
    /**
     * @param oldPassword (optional) 
     * @param newPassword (optional) 
     * @return Success
     */
    changePassword(oldPassword: string | undefined, newPassword: string | undefined): Promise<void>;
    /**
     * @return Success
     */
    getAllBooks(): Promise<BookModel[]>;
    /**
     * @return Success
     */
    getBookById(bookId: number): Promise<BookModel>;
    /**
     * @param playthroughId (optional) 
     * @param body (optional) 
     * @return Success
     */
    updateParagraph(playthroughId: number | undefined, body: PlayThroughParagraphModel | undefined): Promise<void>;
    /**
     * @param playthroughId (optional) 
     * @param body (optional) 
     * @return Success
     */
    appendParagraph(playthroughId: number | undefined, body: PlayThroughParagraphModel | undefined): Promise<PlayThroughParagraphModel>;
    /**
     * @return Success
     */
    deleteLastParagraph(playthroughId: number): Promise<number>;
    /**
     * @return Success
     */
    getPlaythroughsByBookId(bookId: number): Promise<PlayThroughModel[]>;
    /**
     * @return Success
     */
    getPlaythrough(playthroughId: number): Promise<PlayThroughModel>;
    /**
     * @return Success
     */
    createPlaythrough(bookId: number): Promise<number>;
    /**
     * @param body (optional) 
     * @return Success
     */
    updateStat(body: PlaythroughStatModel | undefined): Promise<void>;
}

export class Client implements IClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param username (optional) 
     * @param password (optional) 
     * @return Success
     */
    registerAccount(username: string | undefined, password: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Account?";
        if (username === null)
            throw new Error("The parameter 'username' cannot be null.");
        else if (username !== undefined)
            url_ += "username=" + encodeURIComponent("" + username) + "&";
        if (password === null)
            throw new Error("The parameter 'password' cannot be null.");
        else if (password !== undefined)
            url_ += "password=" + encodeURIComponent("" + password) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PUT",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegisterAccount(_response);
        });
    }

    protected processRegisterAccount(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = ProblemDetails.fromJS(resultData422);
            return throwException("Client Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param oldPassword (optional) 
     * @param newPassword (optional) 
     * @return Success
     */
    changePassword(oldPassword: string | undefined, newPassword: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Account?";
        if (oldPassword === null)
            throw new Error("The parameter 'oldPassword' cannot be null.");
        else if (oldPassword !== undefined)
            url_ += "oldPassword=" + encodeURIComponent("" + oldPassword) + "&";
        if (newPassword === null)
            throw new Error("The parameter 'newPassword' cannot be null.");
        else if (newPassword !== undefined)
            url_ += "newPassword=" + encodeURIComponent("" + newPassword) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChangePassword(_response);
        });
    }

    protected processChangePassword(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = ProblemDetails.fromJS(resultData422);
            return throwException("Client Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAllBooks(): Promise<BookModel[]> {
        let url_ = this.baseUrl + "/api/Books";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllBooks(_response);
        });
    }

    protected processGetAllBooks(response: Response): Promise<BookModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BookModel.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BookModel[]>(<any>null);
    }

    /**
     * @return Success
     */
    getBookById(bookId: number): Promise<BookModel> {
        let url_ = this.baseUrl + "/api/Books/{bookId}";
        if (bookId === undefined || bookId === null)
            throw new Error("The parameter 'bookId' must be defined.");
        url_ = url_.replace("{bookId}", encodeURIComponent("" + bookId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBookById(_response);
        });
    }

    protected processGetBookById(response: Response): Promise<BookModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BookModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BookModel>(<any>null);
    }

    /**
     * @param playthroughId (optional) 
     * @param body (optional) 
     * @return Success
     */
    updateParagraph(playthroughId: number | undefined, body: PlayThroughParagraphModel | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Paragraph/UpdateParagraph?";
        if (playthroughId === null)
            throw new Error("The parameter 'playthroughId' cannot be null.");
        else if (playthroughId !== undefined)
            url_ += "playthroughId=" + encodeURIComponent("" + playthroughId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateParagraph(_response);
        });
    }

    protected processUpdateParagraph(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param playthroughId (optional) 
     * @param body (optional) 
     * @return Success
     */
    appendParagraph(playthroughId: number | undefined, body: PlayThroughParagraphModel | undefined): Promise<PlayThroughParagraphModel> {
        let url_ = this.baseUrl + "/api/Paragraph/AppendParagraph?";
        if (playthroughId === null)
            throw new Error("The parameter 'playthroughId' cannot be null.");
        else if (playthroughId !== undefined)
            url_ += "playthroughId=" + encodeURIComponent("" + playthroughId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAppendParagraph(_response);
        });
    }

    protected processAppendParagraph(response: Response): Promise<PlayThroughParagraphModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PlayThroughParagraphModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PlayThroughParagraphModel>(<any>null);
    }

    /**
     * @return Success
     */
    deleteLastParagraph(playthroughId: number): Promise<number> {
        let url_ = this.baseUrl + "/api/Paragraph/DeleteParagraph/{playthroughId}";
        if (playthroughId === undefined || playthroughId === null)
            throw new Error("The parameter 'playthroughId' must be defined.");
        url_ = url_.replace("{playthroughId}", encodeURIComponent("" + playthroughId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteLastParagraph(_response);
        });
    }

    protected processDeleteLastParagraph(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * @return Success
     */
    getPlaythroughsByBookId(bookId: number): Promise<PlayThroughModel[]> {
        let url_ = this.baseUrl + "/api/Playthrough/ByBookId/{bookId}";
        if (bookId === undefined || bookId === null)
            throw new Error("The parameter 'bookId' must be defined.");
        url_ = url_.replace("{bookId}", encodeURIComponent("" + bookId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPlaythroughsByBookId(_response);
        });
    }

    protected processGetPlaythroughsByBookId(response: Response): Promise<PlayThroughModel[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlayThroughModel.fromJS(item));
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PlayThroughModel[]>(<any>null);
    }

    /**
     * @return Success
     */
    getPlaythrough(playthroughId: number): Promise<PlayThroughModel> {
        let url_ = this.baseUrl + "/api/Playthrough/{playthroughId}";
        if (playthroughId === undefined || playthroughId === null)
            throw new Error("The parameter 'playthroughId' must be defined.");
        url_ = url_.replace("{playthroughId}", encodeURIComponent("" + playthroughId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPlaythrough(_response);
        });
    }

    protected processGetPlaythrough(response: Response): Promise<PlayThroughModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PlayThroughModel.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PlayThroughModel>(<any>null);
    }

    /**
     * @return Success
     */
    createPlaythrough(bookId: number): Promise<number> {
        let url_ = this.baseUrl + "/api/Playthrough/{bookId}";
        if (bookId === undefined || bookId === null)
            throw new Error("The parameter 'bookId' must be defined.");
        url_ = url_.replace("{bookId}", encodeURIComponent("" + bookId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreatePlaythrough(_response);
        });
    }

    protected processCreatePlaythrough(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateStat(body: PlaythroughStatModel | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/PlaythroughStat";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateStat(_response);
        });
    }

    protected processUpdateStat(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class BookModel implements IBookModel {
    readonly code?: string | undefined;
    readonly description?: string | undefined;
    readonly id?: number;
    readonly stats?: string[] | undefined;
    readonly title?: string | undefined;

    constructor(data?: IBookModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).code = _data["code"];
            (<any>this).description = _data["description"];
            (<any>this).id = _data["id"];
            if (Array.isArray(_data["stats"])) {
                (<any>this).stats = [] as any;
                for (let item of _data["stats"])
                    (<any>this).stats!.push(item);
            }
            (<any>this).title = _data["title"];
        }
    }

    static fromJS(data: any): BookModel {
        data = typeof data === 'object' ? data : {};
        let result = new BookModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["description"] = this.description;
        data["id"] = this.id;
        if (Array.isArray(this.stats)) {
            data["stats"] = [];
            for (let item of this.stats)
                data["stats"].push(item);
        }
        data["title"] = this.title;
        return data; 
    }
}

export interface IBookModel {
    code?: string | undefined;
    description?: string | undefined;
    id?: number;
    stats?: string[] | undefined;
    title?: string | undefined;
}

export class PlayThroughModel implements IPlayThroughModel {
    id?: number;
    startParagraph?: PlayThroughParagraphModel | undefined;
    book?: BookModel | undefined;
    created?: Date;

    constructor(data?: IPlayThroughModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.startParagraph = _data["startParagraph"] ? PlayThroughParagraphModel.fromJS(_data["startParagraph"]) : <any>undefined;
            this.book = _data["book"] ? BookModel.fromJS(_data["book"]) : <any>undefined;
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PlayThroughModel {
        data = typeof data === 'object' ? data : {};
        let result = new PlayThroughModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["startParagraph"] = this.startParagraph ? this.startParagraph.toJSON() : <any>undefined;
        data["book"] = this.book ? this.book.toJSON() : <any>undefined;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IPlayThroughModel {
    id?: number;
    startParagraph?: PlayThroughParagraphModel | undefined;
    book?: BookModel | undefined;
    created?: Date;
}

export class PlayThroughParagraphModel implements IPlayThroughParagraphModel {
    id?: number;
    number?: number;
    items?: string | undefined;
    description?: string | undefined;
    toParagraphId?: number | undefined;
    toParagraph?: PlayThroughParagraphModel | undefined;
    stats?: PlaythroughStatModel[] | undefined;
    xPos?: number;
    yPos?: number;

    constructor(data?: IPlayThroughParagraphModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.number = _data["number"];
            this.items = _data["items"];
            this.description = _data["description"];
            this.toParagraphId = _data["toParagraphId"];
            this.toParagraph = _data["toParagraph"] ? PlayThroughParagraphModel.fromJS(_data["toParagraph"]) : <any>undefined;
            if (Array.isArray(_data["stats"])) {
                this.stats = [] as any;
                for (let item of _data["stats"])
                    this.stats!.push(PlaythroughStatModel.fromJS(item));
            }
            this.xPos = _data["xPos"];
            this.yPos = _data["yPos"];
        }
    }

    static fromJS(data: any): PlayThroughParagraphModel {
        data = typeof data === 'object' ? data : {};
        let result = new PlayThroughParagraphModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["number"] = this.number;
        data["items"] = this.items;
        data["description"] = this.description;
        data["toParagraphId"] = this.toParagraphId;
        data["toParagraph"] = this.toParagraph ? this.toParagraph.toJSON() : <any>undefined;
        if (Array.isArray(this.stats)) {
            data["stats"] = [];
            for (let item of this.stats)
                data["stats"].push(item.toJSON());
        }
        data["xPos"] = this.xPos;
        data["yPos"] = this.yPos;
        return data; 
    }
}

export interface IPlayThroughParagraphModel {
    id?: number;
    number?: number;
    items?: string | undefined;
    description?: string | undefined;
    toParagraphId?: number | undefined;
    toParagraph?: PlayThroughParagraphModel | undefined;
    stats?: PlaythroughStatModel[] | undefined;
    xPos?: number;
    yPos?: number;
}

export class PlaythroughStatModel implements IPlaythroughStatModel {
    name?: string | undefined;
    value?: number;
    statId?: number;
    bookStatId?: number;
    initNumDice?: number;
    initModifier?: number;

    constructor(data?: IPlaythroughStatModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
            this.statId = _data["statId"];
            this.bookStatId = _data["bookStatId"];
            this.initNumDice = _data["initNumDice"];
            this.initModifier = _data["initModifier"];
        }
    }

    static fromJS(data: any): PlaythroughStatModel {
        data = typeof data === 'object' ? data : {};
        let result = new PlaythroughStatModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        data["statId"] = this.statId;
        data["bookStatId"] = this.bookStatId;
        data["initNumDice"] = this.initNumDice;
        data["initModifier"] = this.initModifier;
        return data; 
    }
}

export interface IPlaythroughStatModel {
    name?: string | undefined;
    value?: number;
    statId?: number;
    bookStatId?: number;
    initNumDice?: number;
    initModifier?: number;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class ValidationProblemDetails extends ProblemDetails implements IValidationProblemDetails {
    readonly errors?: { [key: string]: string[]; } | undefined;

    constructor(data?: IValidationProblemDetails) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (_data["errors"]) {
                (<any>this).errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>this).errors![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
        }
    }

    static fromJS(data: any): ValidationProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    data["errors"][key] = this.errors[key];
            }
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IValidationProblemDetails extends IProblemDetails {
    errors?: { [key: string]: string[]; } | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}