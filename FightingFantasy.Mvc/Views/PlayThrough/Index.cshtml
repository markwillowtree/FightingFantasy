@using FightingFantasy.Mvc.ApiClients;
@using System.Text;
@using System.Web;

@model FightingFantasy.Mvc.Models.PlayThroughs.IndexViewModel

<div class="container-fluid">
    <div class="row">
        <div class="col-3" id="formDiv">
            <form id="statsForm">
                @*<input type="hidden" value="@Model.SelectedParagraph.Id" id="paragraphId" />*@
                <div class="form-row">
                    <div class="col-3">
                        <label class="col-form-label" for="paragraphNumber">Paragraph</label>
                        <input type="number" class="form-control" id="paragraphNumber" value="@Model.SelectedParagraph.Number" />
                    </div>

                    <div class="col">
                        <label class="col-form-label" for="paragraphDescription">Description</label>
                        <input type="text" class="form-control" id="paragraphDescription" value="@Model.SelectedParagraph.Description" />
                    </div>
                </div>

                @{ var groupedStats = Model.SelectedParagraph.Stats.Select((value, index) => new { Value = value, Index = index })
                                           .GroupBy(x => x.Index / 4, v => v.Value); }

                @foreach (var group in groupedStats)
                {
                    @Html.Raw("<div class='form-row'>")

                    foreach (var stat in group)
                    {
                        <div class="col">
                            <label class="col-form-label" for="@stat.Name">@stat.Name</label>
                            <input type="number" class="form-control" id="@stat.Name" value="@stat.Value" />
                        </div>
                    }
                    
                    @Html.Raw("</div>")
                }

                <div class="form-row">
                    <div class="col">
                        <label class="col-form-label" for="items">Items</label>
                        <textarea id="items" class="form-control form-control-lg">@Model.SelectedParagraph.Items</textarea>
                    </div>
                </div>
            </form>
        </div>
        <div class="col-9">
            <div id="mapCanvas" class="row" style="height: 500px; background-color: antiquewhite;"></div>
            
            <div class="row justify-content-between">
                <div class="col-4">
                    <button id="addParagraph">New paragraph</button>
                    <button id="deleteLastParagraph">Delete last paragraph</button>
                </div>

                <div class="col-4">
                    <button id="zoomIn">Zoom in</button>
                    <button id="zoomOut">Zoom out</button>
                    <button id="resetZoom">Reset zoom</button>
                </div>
            </div>

        </div>
    </div>
</div>

@section Scripts {
    <script src="/lib/cytoscape/cytoscape.min.js"></script>
    <script src="~/js/PlaythroughService.js"></script>
    <script src="~/js/BackendRepository.js"></script>
    <script src="~/js/CytoRepository.js"></script>

    <script>
        // serialize playthrough model to JSON
        var playthrough = @Html.Raw(Json.Serialize(@Model.Playthrough));
        var selectedParagraphId = @(Model.SelectedParagraph.Id);

        // instantiate repositories
        var playthroughService = new PlaythroughService(playthrough, selectedParagraphId);
        var backendRepo = new BackendRepository();
        

        $(document).ready(function () {
            var cytoRepo = new CytoRepository(playthrough, 'mapCanvas');

            // zoom buttons
            $('#zoomIn').on('click', function () {
                cytoRepo.incrementZoom()
            });

            $('#zoomOut').on('click', function () {
                cytoRepo.decrementZoom()
            });

            $('#resetZoom').on('click', function () {
                cytoRepo.resetZoom()
            });

            // add new paragraph button
            $('#addParagraph').on('click', function () {
                playthroughService.appendParagraph();
                cytoRepo.updateGraph(playthroughService.playthrough);
            });

            // delete last paragraph button
            $('#deleteLastParagraph').on('click', function () {
                playthroughService.deleteLastParagraph();

                cytoRepo.updateGraph(playthroughService.playthrough);
            });

            // update playthrough model when form is updated
            $(".form-control").change(function () {
                var control = $(this);
                var value = control.val();
                var attrName = control.attr('id');

                if (attrName == 'items') {
                    playthroughService.editItems(value);
                } 
                else if (attrName == 'paragraphNumber') {
                    value = tryParseNumeric($(this), value);

                    playthroughService.editNumber(value);
                    var paragraph = playthroughService.selectedParagraph;
                    cytoRepo.editParagraph(paragraph.id, value, paragraph.description);
                }
                else if (attrName == 'paragraphDescription') {
                    playthroughService.editDescription(value);
                    var paragraph = playthroughService.selectedParagraph;
                    cytoRepo.editParagraph(paragraph.id, paragraph.number, value);
                }
                else {
                    value = tryParseNumeric($(this), value);
                    playthroughService.editStat(attrName, value);
                }
            });

            // select paragraph when graph node clicked
            cytoRepo.cy.on('mousedown', function (event) {
                if (event.target != cytoRepo.cy) {
                    var id = event.target._private.data.id;
                    playthroughService.setSelectedParagraph(id);
                }
            });

            // update form when paragraph selected
            $(playthroughService).on('paragraphSelected', function (evt, paragraph) {
                $('#paragraphNumber').val(paragraph.number);
                $('#paragraphDescription').val(paragraph.description);
                $('#items').val(paragraph.items);

                for (var i = 0; i < paragraph.stats.length; i++) {
                    $(`#${paragraph.stats[i].name}`).val(paragraph.stats[i].value);
                }
            });
        });

        function tryParseNumeric(ctrl, value) {
            var val = Number(value);

            if (val == NaN || val == 0) {
                ctrl.val(0);
                return 0;
            }

            return val;
        }

    </script>
}